/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LogInViewController.java
 *
 * Created on Oct 24, 2011, 5:24:36 PM
 */
package gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.concurrent.Semaphore;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import model.CharacterInfo;
import network.LogInClient;
import network.LogInNetworkDelegate;
import network.Message;
import persistence.PersistenceMaster;

/**
 *
 * @author Warkst
 */
public class LogInViewController extends javax.swing.JFrame implements LogInNetworkDelegate {

    private LogInClient logInClient;
    private Semaphore logInStartSignal;
    private LogInVCDelegate delegate;

    /** Creates new form LogInViewController */
    public LogInViewController(LogInVCDelegate delegate) {
	this.delegate = delegate;

	this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);

	initComponents();

	rememberAccountCheckbox.setSelected(PersistenceMaster.rememberAccountName());
	if (rememberAccountCheckbox.isSelected()) {
	    accountNameTextField.setText(PersistenceMaster.getAccountName());
	    passwordTextField.requestFocus();
	}

	int width = this.getWidth();
	int height = this.getHeight();
	Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
	setBounds((int) ((screen.getWidth() - width) / 2), (int) ((screen.getHeight() - height) / 2), width, height);

	initListeners();

	logInStartSignal = new Semaphore(0);

	initNetworkComponents();
    }

    private void initNetworkComponents() {
	boolean serverOnline = false;
	try {
	    logInClient = new LogInClient(this, logInStartSignal);
	    logInClient.start();
	    serverOnline = true;
	} catch (UnknownHostException ex) {
	    System.err.println("Host doesn't run this service! \nHost Exception: " + ex);
	} catch (IOException ex) {
	    System.err.println("Server is offline: (" + ex + ")");
	}
	this.serverIsOnline(serverOnline);
    }

    private void initListeners() {
	passwordTextField.addKeyListener(new KeyListener() {

	    public void keyTyped(KeyEvent e) {
	    }

	    public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_ENTER) {
		    logIn();
		}
	    }

	    public void keyReleased(KeyEvent e) {
	    }
	});
    }

    private void serverIsOnline(boolean online) {
	if (!online) {
	    serverStatusLabel.setText("OFFLINE");
	    serverStatusLabel.setForeground(Color.RED);
	    Timer retry = new Timer(10000, new ActionListener() {

		public void actionPerformed(ActionEvent e) {
		    initNetworkComponents();
		}
	    });
	    retry.setRepeats(false);
	    retry.start();
	    System.out.println("Retrying connection...");
	} else {
	    serverStatusLabel.setText("ONLINE");
	    serverStatusLabel.setForeground(Color.GREEN);
	}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        accountNameTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();
        logInButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        serverStatusLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rememberAccountCheckbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        accountNameTextField.setNextFocusableComponent(passwordTextField);

        passwordTextField.setNextFocusableComponent(accountNameTextField);

        logInButton.setText("Log in");
        logInButton.setFocusable(false);
        logInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logInButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Server status:");

        jLabel2.setText("Online Game Client");

        serverStatusLabel.setText("unknown");

        jLabel4.setText("Account");

        jLabel5.setText("Password");

        rememberAccountCheckbox.setText("Remember My Account");
        rememberAccountCheckbox.setFocusable(false);
        rememberAccountCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rememberAccountCheckboxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(serverStatusLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 115, Short.MAX_VALUE)
                                .add(logInButton))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel4)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 21, Short.MAX_VALUE))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel5)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, passwordTextField)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, accountNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)))))
                    .add(layout.createSequentialGroup()
                        .add(60, 60, 60)
                        .add(jLabel2))
                    .add(layout.createSequentialGroup()
                        .add(102, 102, 102)
                        .add(rememberAccountCheckbox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 17, Short.MAX_VALUE)
                .add(rememberAccountCheckbox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(accountNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(passwordTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(logInButton)
                    .add(jLabel1)
                    .add(serverStatusLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logIn() {
	new Thread(new Runnable() {

	    public void run() {
		logInButton.setEnabled(false);
		// display logging in
	    }
	}).start();

	String username = accountNameTextField.getText();
	String password = String.copyValueOf(passwordTextField.getPassword());

	System.out.println("username: '" + username + "' - password: '" + password + "'");

	if (username.length() < 1) {
	    JOptionPane.showMessageDialog(null, "Enter your user name!", "Warning", JOptionPane.ERROR_MESSAGE);
	} else if (password.length() < 1) {
	    JOptionPane.showMessageDialog(null, "Enter your password!", "Warning", JOptionPane.ERROR_MESSAGE);
	} else {
	    logInClient.setLogInCredentials(username, password);
	    logInStartSignal.release();
	}
    }

    private void logInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logInButtonActionPerformed
	logIn();
    }//GEN-LAST:event_logInButtonActionPerformed

    private void rememberAccountCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rememberAccountCheckboxActionPerformed
	//alert the persistence manager
    }//GEN-LAST:event_rememberAccountCheckboxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accountNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton logInButton;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JCheckBox rememberAccountCheckbox;
    private javax.swing.JLabel serverStatusLabel;
    // End of variables declaration//GEN-END:variables

    // delegate methods of LogInClient
    public void logInResult(Message result) {
	HashMap<String, Object> resultArgs = result.getArguments();
	boolean success = (Boolean) resultArgs.get(Message.STR_LOGIN_RESULT);
	String message = (String) resultArgs.get(Message.STR_LOGIN_MESSAGE);

	System.out.println("LogInResult: " + success + "\n'" + message + "'.");

	if (success) {
	    if (rememberAccountCheckbox.isSelected()) {
		// send account name to persistence master
		PersistenceMaster.setAccountName(accountNameTextField.getText());
	    }
//	    JOptionPane.showMessageDialog(null, message, "Login result", JOptionPane.INFORMATION_MESSAGE);
	
	    this.setVisible(false);
	    delegate.loginSuccess((HashMap<String, CharacterInfo>)resultArgs.get(Message.STR_LOGIN_CHARDATA), accountNameTextField.getText());
	    this.dispose();
	} else {
	    JOptionPane.showMessageDialog(null, message, "Login result", JOptionPane.WARNING_MESSAGE);
	    logInButton.setEnabled(true);
	}
    }

    // delegate methods of LogInClient
    public void connectionLost(String message) {
	serverIsOnline(false);
	JOptionPane.showMessageDialog(null, message, "Connection Error!", JOptionPane.ERROR_MESSAGE);
    }
}
