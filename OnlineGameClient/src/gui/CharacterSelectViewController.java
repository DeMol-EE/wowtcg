/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CharacterSelectViewController.java
 *
 * Created on Oct 25, 2011, 1:20:14 PM
 */

package gui;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import model.CharacterInfo;
import network.ConnectionMessage;
import network.Message;

/**
 *
 * @author Warkst
 */
public class CharacterSelectViewController extends javax.swing.JPanel implements ViewController {

    private GUIMaster master;
    private HashMap<String, CharacterInfo> characters;
    private ArrayList<String> welcomeMessages;

    /** Creates new form CharacterSelectViewController */
    public CharacterSelectViewController(GUIMaster master, HashMap<String, CharacterInfo> characters) {
	this.master = master;
	this.characters = characters;
	this.welcomeMessages = new ArrayList<String>();

        initComponents();

	ArrayList<CharacterInfo> charAL = new ArrayList<CharacterInfo>();
	for (CharacterInfo characterInfo : characters.values()) {
	    charAL.add(characterInfo);
	}

	characterList.setDragEnabled(false);
	characterList.setLayoutOrientation(JList.VERTICAL);
	characterList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	characterList.setCellRenderer(new CharacterCellRenderer(charAL));
	characterList.setListData(charAL.toArray());
	characterList.setSelectedIndex(0);
	characterList.requestFocus();
	characterList.addKeyListener(new KeyListener() {
	    public void keyTyped(KeyEvent e) {}
	    public void keyPressed(KeyEvent e) {
		if(e.getKeyCode()==KeyEvent.VK_ENTER){
		    enterWorld();
		} else if (e.getKeyCode() == KeyEvent.VK_DOWN){
		    
		} else if (e.getKeyCode() == KeyEvent.VK_UP){

		}
	    }
	    public void keyReleased(KeyEvent e) {}
	});
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enterWorldButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        characterList = new javax.swing.JList();

        enterWorldButton.setText("Enter World");
        enterWorldButton.setFocusable(false);
        enterWorldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterWorldButtonActionPerformed(evt);
            }
        });

        characterList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(characterList);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 214, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, enterWorldButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(enterWorldButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void enterWorld(){
	master.willEnterWorld();
	
	// this object lives in the EDT
	// do this in a seperate thread to make sure the EDT doesn't freeze
	new Thread(new Runnable() {
	    public void run() {
		//simulate loading time
		for (int i = 0; i < 100000; i++) {
		    System.out.println("i="+i);
		    if (i == 25000) {
			SwingUtilities.invokeLater(new Runnable() {
			    public void run() {
				master.loadingProgress(20);
			    }
			});
		    } else if (i == 50000){
			SwingUtilities.invokeLater(new Runnable() {
			    public void run() {
				master.loadingProgress(40);
			    }
			});
		    } else if (i == 75000){
			SwingUtilities.invokeLater(new Runnable() {
			    public void run() {
				master.loadingProgress(60);
			    }
			});
		    }
		}
		
		SwingUtilities.invokeLater(new Runnable() {
		    public void run() {
			master.loadingProgress(80);
		    }
		});
		
		CharacterInfo character = (CharacterInfo)characterList.getSelectedValue();

		// ** begin testing - ONE MACHINE
		int port = 9876;
		if(character.getName().equalsIgnoreCase("fyrsal")) port = 8765;
		if(character.getName().equalsIgnoreCase("meepz")) port = 7654;
		if(character.getName().equalsIgnoreCase("punani")) port = 6543;
		// ** end testing

		// MAKE SURE THAT THE MESSAGEHANDLERPROVIDER KNOWS ONLY ONE MESSAGEHANDLER
		String clientIP = null;
		try {
		    clientIP = InetAddress.getLocalHost().getHostAddress();
		} catch (UnknownHostException ex) {}

		ConnectionMessage connectionMessage = new ConnectionMessage(Message.MSGTYPE_CONNECTION, clientIP, port, character.getName());
		connectionMessage.putArgument(Message.STR_CHARACTERINFO, character);
		master.getNetworkMaster().startConnection(connectionMessage, master.getGameFrame(), "notag", port);
		
		SwingUtilities.invokeLater(new Runnable() {
		    public void run() {
			master.loadingProgress(100);
		    }
		});

		master.didEnterWorld(character, welcomeMessages);
	    }
	}).start();
    }

    private void enterWorldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterWorldButtonActionPerformed
	enterWorld();
    }//GEN-LAST:event_enterWorldButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList characterList;
    private javax.swing.JButton enterWorldButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public JPanel getView(){
	return this;
    }

    public void handleMessage(Message downlinkMessage) {
	// handle it
    }

    public void electFirstResponder() {
	characterList.requestFocusInWindow();
    }
}
