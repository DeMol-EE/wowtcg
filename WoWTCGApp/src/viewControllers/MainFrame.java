/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Dec 12, 2011, 10:09:59 PM
 */
package viewControllers;

import images.ImageLoader;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.io.FileNotFoundException;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import model.CardSnapshot;
import model.Model;
import model.UserData;
import network.MessageHandler;

/**
 * REGISTER IF CLIENT OR HOST TO DETERMINE WHERE TO SPAWN HERO CARD
 * 
 * Add custom cell renderer for hand list
 * 
 * @author Warkst
 */
public class MainFrame extends javax.swing.JFrame implements MessageHandler {

    //private JPanel cards[][] = new JPanel[10][20];
    private UserData userData;
    private Model model;
    private PrefacePanel preface;

    /** Creates new form MainFrame */
    public MainFrame(Model model, UserData userData) {
	this.model = model;
	this.userData = userData;

	initComponents();
	styleComponents();
	
	loadPreface();
    }
    
    private void styleComponents(){
	// JFrame properties
	this.setLocationRelativeTo(null);
	this.setTitle("WoW: TCG");
	//this.setResizable(false);
	
	// JMenu options
	this.applicationMenu.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
	this.applicationMenu.setBorderPainted(false);
	this.cardsMenu.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
	this.cardsMenu.setBorderPainted(false);
	this.optionsMenu.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
	this.optionsMenu.setBorderPainted(false);
	
	// Background
	int r = (int)(Math.random()*10)+1;
	contentPanel.setBackgroundImage(ImageLoader.scaleImage(ImageLoader.createImageIconAtHomeLocation("wow_bg"+r+".jpg"),contentPanel.getPreferredSize()));
    }

    public void disposeBackgroundFrame(BackgroundFrame frame) {
	// do in separate thread? Nahh
	frame.dispose();
    }
    
    private void loadPreface(){
	if(this.preface == null) this.preface = new PrefacePanel(this);
	setContent(preface);
    }
    
    private void setContent(JPanel newContent){
	contentPanel.removeAll();
	contentPanel.add(newContent, BorderLayout.CENTER);
	
	final MainFrame me = this;
	
	SwingUtilities.invokeLater(new Runnable() {
	    @Override
	    public void run() {
		me.repaint();
		me.validate();
	    }
	});
    }
    
    public void addMenu(JMenu menu){
	this.menuBar.add(menu);
    }
    
    public void removeMenu(JMenu menu){
	this.menuBar.remove(menu);
    }
    
    public void stopSession(){
	setContent(preface);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentPanel = new images.ImagePanelBean();
        menuBar = new javax.swing.JMenuBar();
        applicationMenu = new javax.swing.JMenu();
        onlineGameItem = new javax.swing.JMenuItem();
        offlineTestItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        quitItem = new javax.swing.JMenuItem();
        cardsMenu = new javax.swing.JMenu();
        createDeckItem = new javax.swing.JMenuItem();
        editDeckItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        setDefaultDeckFolderItem = new javax.swing.JMenuItem();
        nicknameItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("WoW TCG"); // NOI18N

        contentPanel.setFocusable(false);
        contentPanel.setMaximumSize(new java.awt.Dimension(24578778, 24545787));
        contentPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        contentPanel.setPreferredSize(new java.awt.Dimension(1440, 800));
        contentPanel.setLayout(new java.awt.BorderLayout());
        getContentPane().add(contentPanel, java.awt.BorderLayout.CENTER);

        applicationMenu.setText("Application");
        applicationMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                applicationMenuMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                applicationMenuMouseExited(evt);
            }
        });

        onlineGameItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.META_MASK));
        onlineGameItem.setText("Online Game...");
        onlineGameItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlineGameItemActionPerformed(evt);
            }
        });
        applicationMenu.add(onlineGameItem);

        offlineTestItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.META_MASK));
        offlineTestItem.setText("Offline Test...");
        offlineTestItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offlineTestItemActionPerformed(evt);
            }
        });
        applicationMenu.add(offlineTestItem);
        applicationMenu.add(jSeparator1);

        quitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.META_MASK));
        quitItem.setText("Quit");
        quitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitItemActionPerformed(evt);
            }
        });
        applicationMenu.add(quitItem);

        menuBar.add(applicationMenu);

        cardsMenu.setText("Cards");
        cardsMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cardsMenuMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cardsMenuMouseExited(evt);
            }
        });

        createDeckItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        createDeckItem.setText("Create Deck...");
        createDeckItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDeckItemActionPerformed(evt);
            }
        });
        cardsMenu.add(createDeckItem);

        editDeckItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        editDeckItem.setText("Edit Deck...");
        cardsMenu.add(editDeckItem);

        menuBar.add(cardsMenu);

        optionsMenu.setText("Options");
        optionsMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                optionsMenuMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                optionsMenuMouseExited(evt);
            }
        });

        setDefaultDeckFolderItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.META_MASK));
        setDefaultDeckFolderItem.setText("Set default deck folder...");
        setDefaultDeckFolderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDefaultDeckFolderItemActionPerformed(evt);
            }
        });
        optionsMenu.add(setDefaultDeckFolderItem);

        nicknameItem.setText("Set nickname...");
        nicknameItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nicknameItemActionPerformed(evt);
            }
        });
        optionsMenu.add(nicknameItem);

        menuBar.add(optionsMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitItemActionPerformed
	System.out.println("MainFrame::Quit - ask confirmation? Terminate Session?");
	quit();
    }//GEN-LAST:event_quitItemActionPerformed

    private void nicknameItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nicknameItemActionPerformed
	System.out.println("MainFrame::STUB - set nickname");
    }//GEN-LAST:event_nicknameItemActionPerformed

    private void offlineTestItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offlineTestItemActionPerformed
	playOffline();
    }//GEN-LAST:event_offlineTestItemActionPerformed

    private void onlineGameItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlineGameItemActionPerformed
	playOnline();
    }//GEN-LAST:event_onlineGameItemActionPerformed

    private void createDeckItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDeckItemActionPerformed
	createDeck();
    }//GEN-LAST:event_createDeckItemActionPerformed

    private void setDefaultDeckFolderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDefaultDeckFolderItemActionPerformed
	JFileChooser c = userData.getFileChooser();
	c.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	int rVal = c.showDialog(this, "Select");
	if (rVal == JFileChooser.APPROVE_OPTION) {
	    // save data 	    
	    userData.setDecksFolder(c.getSelectedFile());
	}
	c.setFileSelectionMode(JFileChooser.FILES_ONLY);
    }//GEN-LAST:event_setDefaultDeckFolderItemActionPerformed

    private void applicationMenuMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_applicationMenuMouseEntered
	this.applicationMenu.setBorderPainted(true);
    }//GEN-LAST:event_applicationMenuMouseEntered

    private void cardsMenuMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cardsMenuMouseEntered
	this.cardsMenu.setBorderPainted(true);
    }//GEN-LAST:event_cardsMenuMouseEntered

    private void optionsMenuMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_optionsMenuMouseEntered
	this.optionsMenu.setBorderPainted(true);
    }//GEN-LAST:event_optionsMenuMouseEntered

    private void applicationMenuMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_applicationMenuMouseExited
	this.applicationMenu.setBorderPainted(false);
    }//GEN-LAST:event_applicationMenuMouseExited

    private void cardsMenuMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cardsMenuMouseExited
	this.cardsMenu.setBorderPainted(false);
    }//GEN-LAST:event_cardsMenuMouseExited

    private void optionsMenuMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_optionsMenuMouseExited
	this.optionsMenu.setBorderPainted(false);
    }//GEN-LAST:event_optionsMenuMouseExited
    
    private void quit() {
	this.dispose();
	System.exit(0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu applicationMenu;
    private javax.swing.JMenu cardsMenu;
    private images.ImagePanelBean contentPanel;
    private javax.swing.JMenuItem createDeckItem;
    private javax.swing.JMenuItem editDeckItem;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem nicknameItem;
    private javax.swing.JMenuItem offlineTestItem;
    private javax.swing.JMenuItem onlineGameItem;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JMenuItem quitItem;
    private javax.swing.JMenuItem setDefaultDeckFolderItem;
    // End of variables declaration//GEN-END:variables

    public void playOnline(){
	System.out.println("STUB:: start online session called");
	JFileChooser c = userData.getFileChooser();
	int rVal = c.showOpenDialog(this);
	if (rVal == JFileChooser.APPROVE_OPTION) {
	    try {
		// show connection frame 		
		new ConnectionFrame(this, userData.loadDeckFromFile(c.getSelectedFile())).setVisible(true);
	    } catch (FileNotFoundException ex) {
		System.err.println("Error loading deck! " + ex);
		JOptionPane.showMessageDialog(new JFrame(), "Error loading deck from file! Opernation aborted", "Error", JOptionPane.ERROR_MESSAGE);
	    }
	}
    }
    
    /**
     * Starts an offline session. Prompts the user to select a deck and launches a SessionController with the given deck and this as callback.
     */
    public void playOffline(){
	JFileChooser c = userData.getFileChooser(); 	
	int rVal = c.showOpenDialog(this); 	
	if (rVal == JFileChooser.APPROVE_OPTION) { 	    
	    try { 		
		 setContent(new SessionController(this, userData.loadDeckFromFile(c.getSelectedFile())));
	    } catch (FileNotFoundException ex) { 				
		System.err.println("Error loading deck! " + ex); 		
		JOptionPane.showMessageDialog(new JFrame(), "Error loading deck from file! Opernation aborted", "Error", JOptionPane.ERROR_MESSAGE); 	    
	    }
	}
    }
    
    public void createDeck(){
	new CreateDeckFrame(this, model, userData).setVisible(true);
    }
    
    @Override
    public void receiveTextMessage(String msg) {
	throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void receiveForeignCard(CardPanel panel) {
	throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void moveCardWithGUIDToLocation(String GUID, Point location) {
	throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void applySnapshotToCardWithGUID(String GUID, CardSnapshot snapshot) {
	throw new UnsupportedOperationException("Not supported yet.");
    }
}