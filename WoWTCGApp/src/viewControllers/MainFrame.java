/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Dec 12, 2011, 10:09:59 PM
 */
package viewControllers;

import images.ImageLoader;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.text.DefaultCaret;
import model.Card;
import model.CardSnapshot;
import model.Deck;
import model.Model;
import model.UserData;
import network.ConnectionProxy;
import network.MessageHandler;

/**
 * REGISTER IF CLIENT OR HOST TO DETERMINE WHERE TO SPAWN HERO CARD
 * 
 * Add custom cell renderer for hand list
 * 
 * @author Warkst
 */
public class MainFrame extends javax.swing.JFrame implements MouseListener, MouseMotionListener, MessageHandler {

    //private JPanel cards[][] = new JPanel[10][20];
    private static final int NOTHING = 0;
    private static final int OFFLINE = 1;
    private static final int ONLINE = 2;
    private int state;
    private UserData userData;
    private Model model;
    private Deck deck;
    private ArrayList<String> hand;
    private ArrayList<String> graveyard;
    private ArrayList<String> removedftgame;
    private boolean dragging = false;
    private CardPanel draggedCard;
    private static final int GRIDX = 20, GRIDY = 20;
    private List<CardPanel> cards = new ArrayList<CardPanel>();
    private ConnectionProxy connection;
    // drag from hand:
    private boolean draggingFromHand = false;
    private Point draggingFromHandLastLocation = null;
    private String draggingFromHandCardName = null;
    private CardPanel draggingFromHandCardPanel = null;
    private boolean draggingFromHandCardPanelShown = false;

    /** Creates new form MainFrame */
    public MainFrame(Model model, UserData userData) {
	this.model = model;
	this.userData = userData;

	this.hand = new ArrayList<String>();
	this.graveyard = new ArrayList<String>();
	this.removedftgame = new ArrayList<String>();

	initComponents();

	this.setLocationRelativeTo(null);

	this.setResizable(false);

	DefaultCaret caret = (DefaultCaret) chatArea.getCaret();
	caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

	textBox.addKeyListener(new KeyAdapter() {

	    @Override
	    public void keyReleased(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_ENTER) {
		    sendText();
		}
	    }
	});

	mainPanel.addMouseListener(this);
	mainPanel.addMouseMotionListener(this);

	backgroundPanel.setBackgroundImage(ImageLoader.createImageIconAtHomeLocation(userData.getUserBackground()));

	backgroundPanel.setLayout(null);

	// reset everything
	stopGame();
    }

    public void electFirstResponder() {
	textBox.requestFocus();
    }

    private void sendText() {
	String msg = textBox.getText();
	textBox.setText("");

	if (msg.length() > 0) {
	    sendMessage(msg);
	}
    }

    private void addToChat(String msg) {
	chatArea.append(msg + "\n");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        masterPanel = new javax.swing.JSplitPane();
        gamePanel = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        leftScrollPanel = new javax.swing.JScrollPane();
        leftList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        deckButton = new javax.swing.JButton();
        graveyardButton = new javax.swing.JButton();
        removedButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JLayeredPane();
        backgroundPanel = new images.ImagePanelBean();
        chatParentPanel = new javax.swing.JLayeredPane();
        chatScroller = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        textBox = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        applicationMenu = new javax.swing.JMenu();
        onlineGameItem = new javax.swing.JMenuItem();
        offlineTestItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        stopSessionItem = new javax.swing.JMenuItem();
        quitItem = new javax.swing.JMenuItem();
        cardsMenu = new javax.swing.JMenu();
        createDeckItem = new javax.swing.JMenuItem();
        editDeckItem = new javax.swing.JMenuItem();
        gameMenu = new javax.swing.JMenu();
        drawCardItem = new javax.swing.JMenuItem();
        spawnTokenItem = new javax.swing.JMenuItem();
        readyAllItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        discardRandomItem = new javax.swing.JMenuItem();
        rollItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        showHandItem = new javax.swing.JMenuItem();
        showDeckItem = new javax.swing.JMenuItem();
        showGraveyardItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        setDefaultDeckFolderItem = new javax.swing.JMenuItem();
        changeBackgroundItem = new javax.swing.JMenuItem();
        DebugMenu = new javax.swing.JMenu();
        spawnHeroItem = new javax.swing.JMenuItem();
        spawnAllyItem = new javax.swing.JMenuItem();
        spawnQuestItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("WoW TCG"); // NOI18N

        masterPanel.setDividerLocation(635);
        masterPanel.setDividerSize(1);
        masterPanel.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        masterPanel.setMaximumSize(new java.awt.Dimension(1200, 800));
        masterPanel.setMinimumSize(new java.awt.Dimension(1200, 800));
        masterPanel.setPreferredSize(new java.awt.Dimension(1200, 800));
        masterPanel.setSize(new java.awt.Dimension(1200, 800));

        gamePanel.setDividerLocation(200);
        gamePanel.setDividerSize(3);

        leftList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        leftList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                leftListMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                leftListMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leftListMouseClicked(evt);
            }
        });
        leftList.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                leftListMouseDragged(evt);
            }
        });
        leftScrollPanel.setViewportView(leftList);

        jPanel2.setMinimumSize(new java.awt.Dimension(100, 29));
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 56));
        jPanel2.setLayout(new java.awt.GridLayout(1, 3));

        deckButton.setText("Deck");
        deckButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deckButtonMouseClicked(evt);
            }
        });
        jPanel2.add(deckButton);

        graveyardButton.setText("GY");
        graveyardButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                graveyardButtonMouseClicked(evt);
            }
        });
        jPanel2.add(graveyardButton);

        removedButton.setText("RftG");
        removedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removedButtonMouseClicked(evt);
            }
        });
        jPanel2.add(removedButton);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
            .add(leftScrollPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(leftScrollPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 575, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        gamePanel.setLeftComponent(jPanel1);

        org.jdesktop.layout.GroupLayout backgroundPanelLayout = new org.jdesktop.layout.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 990, Short.MAX_VALUE)
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 630, Short.MAX_VALUE)
        );

        backgroundPanel.setBounds(0, 0, 990, 630);
        mainPanel.add(backgroundPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        gamePanel.setRightComponent(mainPanel);

        masterPanel.setTopComponent(gamePanel);

        chatScroller.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        chatScroller.setEnabled(false);
        chatScroller.setFocusable(false);

        chatArea.setColumns(20);
        chatArea.setEditable(false);
        chatArea.setLineWrap(true);
        chatArea.setRows(5);
        chatArea.setWrapStyleWord(true);
        chatArea.setFocusable(false);
        chatScroller.setViewportView(chatArea);

        chatScroller.setBounds(0, 0, 1200, 140);
        chatParentPanel.add(chatScroller, javax.swing.JLayeredPane.DEFAULT_LAYER);
        textBox.setBounds(0, 140, 1110, 28);
        chatParentPanel.add(textBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        sendButton.setText("Send");
        sendButton.setFocusable(false);
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        sendButton.setBounds(1110, 140, 90, 29);
        chatParentPanel.add(sendButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        masterPanel.setBottomComponent(chatParentPanel);

        applicationMenu.setText("Application");

        onlineGameItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.META_MASK));
        onlineGameItem.setText("Online Game...");
        onlineGameItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlineGameItemActionPerformed(evt);
            }
        });
        applicationMenu.add(onlineGameItem);

        offlineTestItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.META_MASK));
        offlineTestItem.setText("Offline Test...");
        offlineTestItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offlineTestItemActionPerformed(evt);
            }
        });
        applicationMenu.add(offlineTestItem);
        applicationMenu.add(jSeparator1);

        stopSessionItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.META_MASK));
        stopSessionItem.setText("Stop Session");
        stopSessionItem.setEnabled(false);
        applicationMenu.add(stopSessionItem);

        quitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.META_MASK));
        quitItem.setText("Quit");
        quitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitItemActionPerformed(evt);
            }
        });
        applicationMenu.add(quitItem);

        menuBar.add(applicationMenu);

        cardsMenu.setText("Cards");

        createDeckItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        createDeckItem.setText("Create Deck...");
        createDeckItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDeckItemActionPerformed(evt);
            }
        });
        cardsMenu.add(createDeckItem);

        editDeckItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        editDeckItem.setText("Edit Deck...");
        editDeckItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDeckItemActionPerformed(evt);
            }
        });
        cardsMenu.add(editDeckItem);

        menuBar.add(cardsMenu);

        gameMenu.setText("Game");

        drawCardItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        drawCardItem.setText("Draw Card");
        drawCardItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawCardItemActionPerformed(evt);
            }
        });
        gameMenu.add(drawCardItem);

        spawnTokenItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        spawnTokenItem.setText("Spawn Token");
        spawnTokenItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spawnTokenItemActionPerformed(evt);
            }
        });
        gameMenu.add(spawnTokenItem);

        readyAllItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        readyAllItem.setText("Ready All Cards");
        readyAllItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readyAllItemActionPerformed(evt);
            }
        });
        gameMenu.add(readyAllItem);
        gameMenu.add(jSeparator3);

        discardRandomItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        discardRandomItem.setText("Discard Random Card");
        discardRandomItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardRandomItemActionPerformed(evt);
            }
        });
        gameMenu.add(discardRandomItem);

        rollItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        rollItem.setText("Roll a Die...");
        rollItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollItemActionPerformed(evt);
            }
        });
        gameMenu.add(rollItem);
        gameMenu.add(jSeparator2);

        showHandItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        showHandItem.setText("Show Hand to Opponent");
        showHandItem.setEnabled(false);
        gameMenu.add(showHandItem);

        showDeckItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        showDeckItem.setText("Show Deck to Opponent");
        showDeckItem.setEnabled(false);
        gameMenu.add(showDeckItem);

        showGraveyardItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        showGraveyardItem.setText("Show Graveyard to Opponent");
        showGraveyardItem.setEnabled(false);
        gameMenu.add(showGraveyardItem);

        menuBar.add(gameMenu);

        optionsMenu.setText("Options");

        setDefaultDeckFolderItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.META_MASK));
        setDefaultDeckFolderItem.setText("Set default deck folder...");
        setDefaultDeckFolderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDefaultDeckFolderItemActionPerformed(evt);
            }
        });
        optionsMenu.add(setDefaultDeckFolderItem);

        changeBackgroundItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.META_MASK));
        changeBackgroundItem.setText("Change background...");
        changeBackgroundItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeBackgroundItemActionPerformed(evt);
            }
        });
        optionsMenu.add(changeBackgroundItem);

        menuBar.add(optionsMenu);

        DebugMenu.setText("Debug");

        spawnHeroItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.META_MASK));
        spawnHeroItem.setText("spawnHero");
        spawnHeroItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spawnHeroItemActionPerformed(evt);
            }
        });
        DebugMenu.add(spawnHeroItem);

        spawnAllyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.META_MASK));
        spawnAllyItem.setText("spawnAlly");
        spawnAllyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spawnAllyItemActionPerformed(evt);
            }
        });
        DebugMenu.add(spawnAllyItem);

        spawnQuestItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.META_MASK));
        spawnQuestItem.setText("spawnQuest");
        spawnQuestItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spawnQuestItemActionPerformed(evt);
            }
        });
        DebugMenu.add(spawnQuestItem);

        menuBar.add(DebugMenu);

        setJMenuBar(menuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(masterPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(masterPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 808, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void spawnHeroItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spawnHeroItemActionPerformed

	//JLabel label = new JLabel(ImageLoader.createImageIconAtHomeLocation("NOIMG.GIF"));

	// add a new card at layerOffset = amount of cards and with same index
//	CardPanel card = new CardPanel(myCards.size(), myCards.size());
//	CardPanel card = new CardPanel(model.randomHero(), myCards.size(), myCards.size());
	CardPanel card = new CardPanel(model.randomHero(), cards.size());

	card.setBounds(40, 40, 60, 60);

	addToPlay(card);

//	myCards.add(card);
//
////	mainPanel.add(card, new Integer(JLayeredPane.PALETTE_LAYER+card.getLayerOffset()));
//	mainPanel.add(card, new Integer(JLayeredPane.PALETTE_LAYER));

	//mainPanel.setLayer(card, JLayeredPane.PALETTE_LAYER, 0);
    }//GEN-LAST:event_spawnHeroItemActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
	sendText();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void changeBackgroundItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeBackgroundItemActionPerformed
	new BackgroundFrame(this, userData).setVisible(true);
    }//GEN-LAST:event_changeBackgroundItemActionPerformed

    private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitItemActionPerformed
	quit();
    }//GEN-LAST:event_quitItemActionPerformed

    private void spawnAllyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spawnAllyItemActionPerformed
//	CardPanel card = new CardPanel(model.randomAlly(), myCards.size(), myCards.size());
	CardPanel card = new CardPanel(model.randomAlly(), cards.size());

	card.setBounds(40, 40, 60, 60);

	addToPlay(card);

//	myCards.add(card);
//
////	mainPanel.add(card, new Integer(JLayeredPane.PALETTE_LAYER+card.getLayerOffset()));
//	mainPanel.add(card, new Integer(JLayeredPane.PALETTE_LAYER));
    }//GEN-LAST:event_spawnAllyItemActionPerformed

    private void spawnQuestItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spawnQuestItemActionPerformed
//	CardPanel card = new CardPanel(model.randomQuest(), myCards.size(), myCards.size());
	CardPanel card = new CardPanel(model.randomQuest(), cards.size());

	card.setBounds(40, 40, 60, 60);
	
	addToPlay(card);

//	myCards.add(card);
//
////	mainPanel.add(card, new Integer(JLayeredPane.PALETTE_LAYER+card.getLayerOffset()));
//	mainPanel.add(card, new Integer(JLayeredPane.PALETTE_LAYER));
    }//GEN-LAST:event_spawnQuestItemActionPerformed

    private void createDeckItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDeckItemActionPerformed
//	System.out.println("STUB:: create deck called");
	new CreateDeckFrame(this, model, userData).setVisible(true);
    }//GEN-LAST:event_createDeckItemActionPerformed

    private void editDeckItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDeckItemActionPerformed
	System.out.println("STUB:: edit deck called");
    }//GEN-LAST:event_editDeckItemActionPerformed

    private void onlineGameItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlineGameItemActionPerformed
	System.out.println("STUB:: start online session called");
	JFileChooser c = userData.getFileChooser();
	int rVal = c.showOpenDialog(this);
	if (rVal == JFileChooser.APPROVE_OPTION) {
	    try {
		deck = userData.loadDeckFromFile(c.getSelectedFile());
		deck.shuffle();

		// put hero in left of screen?

		addToChat("--Starting test game with deck: " + c.getSelectedFile().getName() + "--");

		// show connection frame
		new ConnectionFrame(this, deck).setVisible(true);
//		
//		// put hero into play
//		spawnCard(deck.getHero());
//
//		startGame(ONLINE);

	    } catch (FileNotFoundException ex) {
		deck = null;
		System.err.println("Error loading deck! " + ex);
		JOptionPane.showMessageDialog(new JFrame(), "Error loading deck from file! Opernation aborted", "Error", JOptionPane.ERROR_MESSAGE);
	    }
	}
    }//GEN-LAST:event_onlineGameItemActionPerformed

    private void offlineTestItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offlineTestItemActionPerformed
//	System.out.println("STUB:: start offline test called");
	// 
	JFileChooser c = userData.getFileChooser();
	int rVal = c.showOpenDialog(this);
	if (rVal == JFileChooser.APPROVE_OPTION) {
	    try {
		deck = userData.loadDeckFromFile(c.getSelectedFile());
		deck.shuffle();

		// reset the view
		startGame(OFFLINE);

		addToChat("--Starting test game with deck: " + c.getSelectedFile().getName() + "--");

		// put hero into play
		spawnCard(deck.getHero());

	    } catch (FileNotFoundException ex) {
		deck = null;
		System.err.println("Error loading deck! " + ex);
		JOptionPane.showMessageDialog(new JFrame(), "Error loading deck from file! Opernation aborted", "Error", JOptionPane.ERROR_MESSAGE);
	    }
	}
    }//GEN-LAST:event_offlineTestItemActionPerformed

    private void deckButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deckButtonMouseClicked
	if (state != NOTHING) {
	    if (evt.getButton() == MouseEvent.BUTTON1 && !evt.isControlDown()) {
		// Draw a card

		drawCard(1);
		
	    } else if (evt.getButton() == MouseEvent.BUTTON1 && evt.isControlDown()){
		// shuffle deck
		
		sendMessage("shuffling deck");
		deck.shuffle();
		
	    } else if (evt.getButton() == MouseEvent.BUTTON3) {
		// SHOW POPUP WITH OPTIONS: SHUFFLE DECK / DRAW CARD, DRAW X CARDS... / VIEW DECK / MOVE TOP X TO GRAVEYARD... / TOP CARD TO PLAY

		JPopupMenu p = new JPopupMenu();

		JMenuItem shuffleItem = new JMenuItem("Shuffle Deck");
		shuffleItem.addActionListener(new ActionListener() {

		    @Override
		    public void actionPerformed(ActionEvent e) {
//			System.out.println("STUB: SHUFFLE DECK");
			
			sendMessage("shuffling deck");
			deck.shuffle();
		    }
		});
		p.add(shuffleItem);

		p.addSeparator();

		JMenuItem drawItem = new JMenuItem("Draw Card");
		drawItem.addActionListener(new ActionListener() {

		    @Override
		    public void actionPerformed(ActionEvent e) {
//			System.out.println("STUB: DRAW CARD");
			drawCard(1);
		    }
		});
		p.add(drawItem);

		JMenuItem drawXItem = new JMenuItem("Draw X Cards...");
		drawXItem.addActionListener(new ActionListener() {

		    @Override
		    public void actionPerformed(ActionEvent e) {
//			System.out.println("STUB: DRAW X CARDS");
			boolean valid = false;
			int x = 1;
			do {
			    try {
				x = Integer.parseInt(JOptionPane.showInputDialog("How many cards?", 1));
				valid = true;
			    } catch (Exception ex) {
				// nothing
			    }
			} while (!valid);
			drawCard(x);
		    }
		});
		p.add(drawXItem);

		p.addSeparator();

		JMenuItem viewDeckItem = new JMenuItem("View Deck");
		viewDeckItem.addActionListener(new ActionListener() {

		    @Override
		    public void actionPerformed(ActionEvent e) {
//			System.out.println("STUB: VIEW DECK");
			new CardListFrame(MainFrame.this, deck.getCardList(), model, "My Deck").setVisible(true);
			sendMessage("viewing own deck");
		    }
		});
		p.add(viewDeckItem);

		p.addSeparator();

		JMenuItem topToGraveyardItem = new JMenuItem("Top Card To Graveyard");
		topToGraveyardItem.addActionListener(new ActionListener() {

		    @Override
		    public void actionPerformed(ActionEvent e) {
			System.out.println("STUB: MOVE TO GRAVEYARD");
		    }
		});
		p.add(topToGraveyardItem);

		p.addSeparator();

		JMenuItem topToPlayItem = new JMenuItem("Top Card To Play");
		topToPlayItem.addActionListener(new ActionListener() {

		    @Override
		    public void actionPerformed(ActionEvent e) {
			System.out.println("STUB: MOVE TO PLAY");
		    }
		});
		p.add(topToPlayItem);

		p.show(MainFrame.this, evt.getXOnScreen() - getX(), evt.getYOnScreen() - getY());
	    }
	}
    }//GEN-LAST:event_deckButtonMouseClicked

    private void setDefaultDeckFolderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDefaultDeckFolderItemActionPerformed
	JFileChooser c = userData.getFileChooser();
	c.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	int rVal = c.showDialog(this, "Select");
	if (rVal == JFileChooser.APPROVE_OPTION) {
	    // save data
	    userData.setDecksFolder(c.getSelectedFile());
	}
	c.setFileSelectionMode(JFileChooser.FILES_ONLY);
    }//GEN-LAST:event_setDefaultDeckFolderItemActionPerformed

    private void leftListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftListMouseClicked
	// select a card in the deck
	if (evt.getButton() == MouseEvent.BUTTON1) {
	    if (evt.getClickCount() % 2 == 0) {
		//System.out.println("Double clicked on card: " + leftList.getSelectedValue());

		// PLAY CARD
		playCardFromHand((String) leftList.getSelectedValue());
	    }
	} else if (evt.getButton() == MouseEvent.BUTTON3) {
//	    Object o = leftList.getSelectedValue();
	    leftList.setSelectedIndex(leftList.locationToIndex(evt.getPoint()));

	    if (leftList.getSelectedValue() != null) {
		System.out.println("Right clicked on card: " + leftList.getSelectedValue());

		JPopupMenu p = new JPopupMenu();

		JMenuItem readItem = new JMenuItem("Read Card");
		readItem.addActionListener(new ActionListener() {

		    @Override
		    public void actionPerformed(ActionEvent e) {
			model.getCardByName((String) leftList.getSelectedValue()).showCard();
		    }
		});
		p.add(readItem);

		p.addSeparator();

		JMenuItem toDeckItem = new JMenuItem("Put On Deck");
		toDeckItem.addActionListener(new ActionListener() {

		    @Override
		    public void actionPerformed(ActionEvent e) {
			//deck.putOnTop(card);
			System.out.println("STUB:: clicked TOP OF DECK");
			//moveToDeckFromHand()
		    }
		});
		p.add(toDeckItem);

		p.addSeparator();

		JMenuItem discardItem = new JMenuItem("Discard");
		discardItem.addActionListener(new ActionListener() {

		    @Override
		    public void actionPerformed(ActionEvent e) {
			//discard
			System.out.println("STUB:: clicked DISCARD");
			//moveToGraveyardFromHand()
		    }
		});
		p.add(discardItem);

		p.show(this, evt.getXOnScreen() - getX(), evt.getYOnScreen() - getY());
	    }
	}
    }//GEN-LAST:event_leftListMouseClicked

    private void graveyardButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graveyardButtonMouseClicked
	if (state != NOTHING) {
	    if (evt.getButton() == MouseEvent.BUTTON1) {
		new CardListFrame(MainFrame.this, graveyard.toArray(new String[0]), model, "My Graveyard").setVisible(true);
		sendMessage("viewing own graveyard");
	    } else if (evt.getButton() == MouseEvent.BUTTON2){
		// popup with options like shuffle into deck
	    }
	}
    }//GEN-LAST:event_graveyardButtonMouseClicked

    private void removedButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removedButtonMouseClicked
	if (state != NOTHING) {
	    if (evt.getButton() == MouseEvent.BUTTON1) {
		new CardListFrame(MainFrame.this, removedftgame.toArray(new String[0]), model, "My RftG stack").setVisible(true);
		sendMessage("viewing own removed from the game stack");
	    }
	}
    }//GEN-LAST:event_removedButtonMouseClicked

    private void drawCardItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawCardItemActionPerformed
	if (state != NOTHING) {
	    drawCard(1);
	}
    }//GEN-LAST:event_drawCardItemActionPerformed

    private void spawnTokenItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spawnTokenItemActionPerformed
	System.out.println("STUB:: spawn a token");
    }//GEN-LAST:event_spawnTokenItemActionPerformed

    private void rollItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollItemActionPerformed
	boolean valid = false;
	int x = 20;
	do {
	    try {
		x = Integer.parseInt(JOptionPane.showInputDialog("How many sides should the die have?", 20));
		valid = true;
	    } catch (Exception ex) {
		// nothing, reroll lolol
	    }
	} while (!valid);
	rollDie(x);
    }//GEN-LAST:event_rollItemActionPerformed

    private void leftListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftListMousePressed
	if (leftList.getSelectedIndex() > -1) {
	    if (state != NOTHING) {
		if (!draggingFromHand) {

		    // start dragging and generate all the shit

		    draggingFromHand = true;
		    draggingFromHandCardName = (String) leftList.getSelectedValue();
		    draggingFromHandCardPanel = new CardPanel(model.generateCardByName(model.getCardByName(draggingFromHandCardName).getType(), draggingFromHandCardName), cards.size());
		    draggingFromHandCardPanelShown = false;
		    draggingFromHandLastLocation = null;

		    leftList.setEnabled(false);
		}
	    }
	}
    }//GEN-LAST:event_leftListMousePressed

    private void leftListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftListMouseReleased
	if (state != NOTHING) {
	    if (draggingFromHand) {
		if (pointIsInMainPanel(evt.getLocationOnScreen())) {
		    // place card on correct layer and remove from hand
		    hand.remove(draggingFromHandCardName);
		    leftList.setListData(hand.toArray(new String[0]));

		    // remove card from drag layer and add it at the correct layer
		    mainPanel.remove(draggingFromHandCardPanel);
		    addToPlay(draggingFromHandCardPanel);
		} else if (pointIsInDeck(evt.getLocationOnScreen())) {
		    // move card to graveyard
		    hand.remove(draggingFromHandCardName);
		    leftList.setListData(hand.toArray(new String[0]));
		    
		    deck.putOnTop(model.getCardByName(draggingFromHandCardName));
		    
		    if(deckButton.isSelected()) deckButton.setSelected(false);
		} else if (pointIsInGraveyard(evt.getLocationOnScreen())) {
		    // move card to graveyard
		    hand.remove(draggingFromHandCardName);
		    leftList.setListData(hand.toArray(new String[0]));
		    
		    graveyard.add(0, draggingFromHandCardName);
		    
		    sendMessage("discarded a card");
		    
		    if(graveyardButton.isSelected()) graveyardButton.setSelected(false);
		} else if (pointIsInRftg(evt.getLocationOnScreen())) {
		    // move card to graveyard
		    hand.remove(draggingFromHandCardName);
		    leftList.setListData(hand.toArray(new String[0]));
		    
		    removedftgame.add(0, draggingFromHandCardName);
		    
		    if(removedButton.isSelected()) removedButton.setSelected(false);
		} else {
		    // undo drag = do nothing
		}
		draggingFromHand = false;
		draggingFromHandCardName = null;
		draggingFromHandCardPanel = null;
		draggingFromHandCardPanelShown = false;
		draggingFromHandLastLocation = null;
	    }
	}
	// re-enable the list
	leftList.setEnabled(true);

	System.out.println(" mouse released ");

    }//GEN-LAST:event_leftListMouseReleased

    private void leftListMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftListMouseDragged
	// is called pretty slowly...
	
	if (state == NOTHING) {
	    return;
	}
	if (!draggingFromHand) {
	    return;
	}
	
	if(deckButton.isSelected()) deckButton.setSelected(false);
	if(graveyardButton.isSelected()) graveyardButton.setSelected(false);
	if(removedButton.isSelected()) removedButton.setSelected(false);  

	if (pointIsInMainPanel(evt.getLocationOnScreen())) {

	    // calculate where and snap to grid
	    int x = (int) (evt.getLocationOnScreen().getX() - mainPanel.getLocationOnScreen().getX())-10;
	    int y = (int) (evt.getLocationOnScreen().getY() - mainPanel.getLocationOnScreen().getY())-10;
	    x /= GRIDX;
	    x *= GRIDX;
	    y /= GRIDY;
	    y *= GRIDY;

	    Point dragPoint = new Point(x, y);

	    // if the card moved to a new grid location, redraw it
	    if (draggingFromHandLastLocation == null || dragPoint.x != draggingFromHandLastLocation.x || dragPoint.y != draggingFromHandLastLocation.y) {
		draggingFromHandLastLocation = dragPoint;
//		System.out.println("LOCATION: " + dragPoint);
		if (!draggingFromHandCardPanelShown) {
		    // show the card and set to true
		    draggingFromHandCardPanel.setBounds(40, 40, 60, 60);
//		    draggingFromHandCardPanel.setBorder(BorderFactory.createLineBorder(Color.yellow));
		    draggingFromHandCardPanel.setLocation(dragPoint);
		    draggingFromHandCardPanel.setVisible(true);
		    mainPanel.add(draggingFromHandCardPanel, JLayeredPane.DRAG_LAYER);
		    draggingFromHandCardPanelShown = true;
		} else {
		    // only move the card
		    draggingFromHandCardPanel.setLocation(dragPoint);
		}
	    }
	} else if (pointIsInDeck(evt.getLocationOnScreen())) {
	    if(!deckButton.isSelected()) deckButton.setSelected(true);
	} else if (pointIsInGraveyard(evt.getLocationOnScreen())) { 
	    if(!graveyardButton.isSelected()) graveyardButton.setSelected(true);
	} else if (pointIsInRftg(evt.getLocationOnScreen())) {
	    if(!removedButton.isSelected()) removedButton.setSelected(true);
	} else {
	    draggingFromHandLastLocation = null;
	    draggingFromHandCardPanel.setVisible(false);
	    draggingFromHandCardPanelShown = false;
	}
    }//GEN-LAST:event_leftListMouseDragged

    private void readyAllItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readyAllItemActionPerformed
	for (CardPanel cardPanel : cards) {
	    cardPanel.ready();
	}
    }//GEN-LAST:event_readyAllItemActionPerformed

    private void discardRandomItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardRandomItemActionPerformed
	
    }//GEN-LAST:event_discardRandomItemActionPerformed

    private void quit() {
	this.dispose();
	System.exit(0);
    }

    private boolean pointIsInMainPanel(Point aPoint) {
	Point anchor = mainPanel.getLocationOnScreen();
	int width = mainPanel.getWidth();
	int height = mainPanel.getHeight();
	if ((aPoint.x >= anchor.x && aPoint.x <= anchor.x + width && aPoint.y >= anchor.y && aPoint.y <= anchor.y + height)) {
	    return true;
	}
	return false;
    }
    
    private boolean pointIsInDeck(Point aPoint) {
	Point anchor = deckButton.getLocationOnScreen();
	int width = deckButton.getWidth();
	int height = deckButton.getHeight();
	if ((aPoint.x >= anchor.x && aPoint.x <= anchor.x + width && aPoint.y >= anchor.y && aPoint.y <= anchor.y + height)) {
	    return true;
	}
	return false;
    }
    
    private boolean pointIsInGraveyard(Point aPoint) {
	Point anchor = graveyardButton.getLocationOnScreen();
	int width = graveyardButton.getWidth();
	int height = graveyardButton.getHeight();
	if ((aPoint.x >= anchor.x && aPoint.x <= anchor.x + width && aPoint.y >= anchor.y && aPoint.y <= anchor.y + height)) {
	    return true;
	}
	return false;
    }
    
    private boolean pointIsInRftg(Point aPoint) {
	Point anchor = removedButton.getLocationOnScreen();
	int width = removedButton.getWidth();
	int height = removedButton.getHeight();
	if ((aPoint.x >= anchor.x && aPoint.x <= anchor.x + width && aPoint.y >= anchor.y && aPoint.y <= anchor.y + height)) {
	    return true;
	}
	return false;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu DebugMenu;
    private javax.swing.JMenu applicationMenu;
    private images.ImagePanelBean backgroundPanel;
    private javax.swing.JMenu cardsMenu;
    private javax.swing.JMenuItem changeBackgroundItem;
    private javax.swing.JTextArea chatArea;
    private javax.swing.JLayeredPane chatParentPanel;
    private javax.swing.JScrollPane chatScroller;
    private javax.swing.JMenuItem createDeckItem;
    private javax.swing.JButton deckButton;
    private javax.swing.JMenuItem discardRandomItem;
    private javax.swing.JMenuItem drawCardItem;
    private javax.swing.JMenuItem editDeckItem;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JSplitPane gamePanel;
    private javax.swing.JButton graveyardButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JList leftList;
    private javax.swing.JScrollPane leftScrollPanel;
    private javax.swing.JLayeredPane mainPanel;
    private javax.swing.JSplitPane masterPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem offlineTestItem;
    private javax.swing.JMenuItem onlineGameItem;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JMenuItem quitItem;
    private javax.swing.JMenuItem readyAllItem;
    private javax.swing.JButton removedButton;
    private javax.swing.JMenuItem rollItem;
    private javax.swing.JButton sendButton;
    private javax.swing.JMenuItem setDefaultDeckFolderItem;
    private javax.swing.JMenuItem showDeckItem;
    private javax.swing.JMenuItem showGraveyardItem;
    private javax.swing.JMenuItem showHandItem;
    private javax.swing.JMenuItem spawnAllyItem;
    private javax.swing.JMenuItem spawnHeroItem;
    private javax.swing.JMenuItem spawnQuestItem;
    private javax.swing.JMenuItem spawnTokenItem;
    private javax.swing.JMenuItem stopSessionItem;
    private javax.swing.JTextField textBox;
    // End of variables declaration//GEN-END:variables

    private void rollDie(int sides) {
	int outcome = 1 + (int) (Math.random() * sides);
	sendMessage("rolled a " + outcome + " with a " + sides + " sided die!");
    }

    private CardPanel findCardPanelForGUID(String GUID) {
	CardPanel ret = null;
	for (CardPanel cardPanel : cards) {
	    if (cardPanel.getGUID().compareTo(GUID) == 0) {
		ret = cardPanel;
		break;
	    }
	}
	return ret;
    }

    private boolean isMyCardPanel(String GUID) {
	boolean ret = false;
	for (CardPanel cardPanel : cards) {
	    if (cardPanel.getGUID().compareTo(GUID) == 0) {
		ret = true;
		break;
	    }
	}
	return ret;
    }

    /**
     * Registered a mouse click
     * 
     * MAYBE: ADD SELECTED STATE TO PANELS AND ALLOW KEYBOARD INTERACTION?
     * 
     * @param e 
     */
    @Override
    public void mouseClicked(MouseEvent e) {
	// determine the card that was clicked
	Component c = mainPanel.findComponentAt(e.getX(), e.getY());
	if (!(c.getParent() instanceof CardPanel)) {
	    return;
	}
	c = c.getParent(); // change c to the panel
	final CardPanel clickedCard = (CardPanel) c;
	
//	System.out.println("Clicked on "+c.toString());

	final Point clickedLocation = e.getLocationOnScreen();

	// on right click, make a JPopupDialog
	if (e.getButton() == MouseEvent.BUTTON3) {
	    JPopupMenu popup = new JPopupMenu();

	    JMenuItem readItem = new JMenuItem("Read card...");
	    readItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    //
		    //System.out.println("STUB :: Read card clicked");
		    clickedCard.showCard(clickedLocation);
		}
	    });

	    popup.add(readItem);

	    popup.addSeparator();

	    JMenuItem menuItem = new JMenuItem("Exhaust");
	    if (clickedCard.isExhausted()) {
		menuItem.setText("Ready");
	    }
	    menuItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    //System.out.println("Clicked cardPanel: "+clickedCard.getName());
		    clickedCard.toggleExhaust();
		}
	    });
	    popup.add(menuItem);

	    JMenuItem flipItem = new JMenuItem("Flip");
	    flipItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    clickedCard.toggleFlip();
		    if (state == ONLINE) {
			connection.sendSnapshot(clickedCard.getGUID(), clickedCard.getSnapshot());
		    }
		}
	    });
	    popup.add(flipItem);

	    popup.addSeparator();

	    JMenuItem countersItem = new JMenuItem("Set Counters...");
	    countersItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    boolean validInput = false;
		    int res = 0;
		    do {
			try {
			    String resString = JOptionPane.showInputDialog(new JFrame(), "Counters:", clickedCard.getCounters());

			    // close or cancel
			    if (resString == null) {
				break;
			    }

			    res = Integer.parseInt(resString);

			    //if(resString == JOptionPane.CANCEL_OPTION)

			    validInput = true;
			} catch (Exception ex) {
			    System.err.println("Caught an error: " + ex);
			    // learn to enter numbers faggots
			}

		    } while (!validInput);

		    if (validInput) {
			clickedCard.setCounters(res);
			if (state == ONLINE) {
			    connection.sendSnapshot(clickedCard.getGUID(), clickedCard.getSnapshot());
			}
		    }
		}
	    });

//	    popup.add(countersItem);

	    JMenuItem addCounterItem = new JMenuItem("Add Counter");
	    addCounterItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    clickedCard.setCounters(clickedCard.getCounters() + 1);

		    if (state == ONLINE) {
			connection.sendSnapshot(clickedCard.getGUID(), clickedCard.getSnapshot());
		    }
		}
	    });

	    popup.add(addCounterItem);

	    JMenuItem removeCounterItem = new JMenuItem("Remove Counter");
	    removeCounterItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    clickedCard.setCounters(clickedCard.getCounters() - 1);

		    if (state == ONLINE) {
			connection.sendSnapshot(clickedCard.getGUID(), clickedCard.getSnapshot());
		    }
		}
	    });

	    popup.add(removeCounterItem);

	    popup.add(countersItem);

	    popup.addSeparator();

	    JMenuItem controlItem = new JMenuItem("Take Control!");
	    if (clickedCard.isMyCard()) {
		controlItem.setText("Give Control");
	    }
	    controlItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    System.out.println("STUB :: Switching control of card!");
		}
	    });

	    popup.add(controlItem);

	    popup.addSeparator();

	    JMenuItem toHandItem = new JMenuItem("To Hand");
	    toHandItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    //System.out.println("STUB :: Moving card to hand");
		    moveCardToHandFromPlay(clickedCard);
		}
	    });

	    popup.add(toHandItem);

	    JMenuItem graveyardItem = new JMenuItem("To Graveyard");
	    graveyardItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    //System.out.println("STUB :: Moving card to graveyard");
		    moveCardToGraveyardFromPlay(clickedCard);
		}
	    });

	    popup.add(graveyardItem);

	    JMenuItem toDeckItem = new JMenuItem("To Top Of Deck");
	    toDeckItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    System.out.println("STUB :: Moving card to top of deck");
		}
	    });

	    popup.add(toDeckItem);

	    JMenuItem removeFromGameItem = new JMenuItem("Remove From Game");
	    removeFromGameItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    System.out.println("STUB :: Removing from the game");
		}
	    });

	    popup.add(removeFromGameItem);

	    popup.addSeparator();

	    // add to top, one to top, one to bot, to bot

	    JMenuItem toTopItem = new JMenuItem("Bring To Top");
	    toTopItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
//		    clickedCard.toFront(getTopLayer()+1);

		    // remove it and add it to the back = put on top
		    cards.remove(clickedCard);
		    cards.add(clickedCard);

//		    redrawCard(clickedCard);

		    redrawAllCards();
		}
	    });
	    popup.add(toTopItem);

	    JMenuItem oneUpItem = new JMenuItem("Move One Up");
	    oneUpItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    // remove it and add it to its previous place + 1
		    int index = cards.indexOf(clickedCard);
		    if (index < cards.size() - 1) {
			cards.remove(clickedCard);
			cards.add(index + 1, clickedCard);
		    }

		    redrawAllCards();
		}
	    });
	    popup.add(oneUpItem);

	    JMenuItem oneDownItem = new JMenuItem("Move One Down");
	    oneDownItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
		    // remove it and add it to its previous place - 1
		    int index = cards.indexOf(clickedCard);
		    if (index > 0) {
			cards.remove(clickedCard);
			cards.add(index - 1, clickedCard);
		    }

		    redrawAllCards();
		}
	    });
	    popup.add(oneDownItem);

	    JMenuItem toBackItem = new JMenuItem("Bring To Back");
	    toBackItem.addActionListener(new ActionListener() {

		@Override
		public void actionPerformed(ActionEvent e) {
//		    clickedCard.toFront(getTopLayer()+1);

		    // remove it and add it to the front = put in top
		    cards.remove(clickedCard);
		    cards.add(0, clickedCard);

//		    redrawCard(clickedCard);

		    redrawAllCards();
		}
	    });
	    popup.add(toBackItem);

	    popup.show(c, e.getX() - c.getX(), e.getY() - c.getY());
	} else if (e.getButton() == MouseEvent.BUTTON1 && e.isShiftDown()) {
	    clickedCard.toggleExhaust();
//	    this.repaint();
	    System.out.println(" should exhaust ");
	    
	    if (state == ONLINE) {
		connection.sendSnapshot(clickedCard.getGUID(), clickedCard.getSnapshot());
	    }
	} else if (e.getButton() == MouseEvent.BUTTON1 && e.isControlDown()) {
	    
	    System.out.println("should delete");
	    
	    // ctrl+click -> card to graveyard
	    moveCardToGraveyardFromPlay(clickedCard);
	} 
    }

    /**
     * MAKE SURE THIS ONLY WORKS FOR CARDS THAT I OWN
     * 
     * Maybe: dress up the dragged card (add border or just semi transparent color layer)
     * DOESNT WORK, AT LEAST NOT WITH BORDERS FOR SOME ODD REASON
     * 
     * @param e 
     */
    @Override
    public void mousePressed(MouseEvent e) {
	// only drag with left mouse button
//	if (e.getButton() == MouseEvent.BUTTON1 && !dragging && !e.isControlDown()) {
	if (e.getButton() == MouseEvent.BUTTON1 && !dragging && !e.isControlDown() && !e.isShiftDown()) {
	    
	    System.out.println("should start drag");
	    
	    if(e.isControlDown()) return;
	    
	    // reset drag and start
	    draggedCard = null;
	    dragging = true;

	    // find component that was clicked
	    Component c = mainPanel.findComponentAt(e.getX(), e.getY());
	    if (!(c.getParent() instanceof CardPanel)) {
		return;
	    }
	    c = c.getParent(); // change c to the panel

	    // find location of click
	    Point compLoc = c.getLocation();

	    // find card and register it as drag card
	    draggedCard = (CardPanel) c;

	    System.out.println("Clicked on card " + draggedCard.getCardName() + " on layer " + mainPanel.getLayer(c));

	    // pick up card
	    draggedCard.setLocation(compLoc);
	    draggedCard.setBounds((int) compLoc.getX(), (int) compLoc.getY(), (int) c.getWidth(), (int) c.getHeight());

	    // remove card from its layer and add to drag layer
	    mainPanel.remove(draggedCard);
	    mainPanel.add(draggedCard, JLayeredPane.DRAG_LAYER);

	    // trigger redraw
	    mainPanel.validate();

	    // set cursor to drag
	    mainPanel.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
	}
    }

    /**
     * gets triggered after ctrl-c + alt-c
     * 
     * @param e 
     */
    @Override
    public void mouseReleased(MouseEvent e) {
	dragging = false;
	if (e.getButton() == MouseEvent.BUTTON1) {
//	    if (!dragging || draggedCard == null) {
//		return;
//	    } else {
//		dragging = false;
//	    }
	    if(draggedCard == null){
		return;
	    }

	    // reset cursor
	    mainPanel.setCursor(null);

	    // remove card from drag layer
	    mainPanel.remove(draggedCard);

	    // add card to its previous layer
	    mainPanel.add(draggedCard, new Integer(JLayeredPane.PALETTE_LAYER + cards.indexOf(draggedCard)));

	    System.out.println("Released card " + draggedCard.getCardName() + " on layer " + mainPanel.getLayer(draggedCard));

	    // broadcast this!!
	    if (state == ONLINE) {
		connection.moveCardWithGUID(draggedCard.getGUID(), draggedCard.getLocation());
	    }
	}
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void mouseDragged(MouseEvent e) {
	
	// is called fast
	
	if (e.getButton() == MouseEvent.BUTTON1) {
	    if (draggedCard == null) {
		return;
	    }
	    if (!dragging) {
		dragging = true;
	    }

	    //	int x = e.getX()+dx;
	    int x = e.getX() - 10;
	    //	int y = e.getY()+dy;
	    int y = e.getY() - 10;

	    // snap to grid
	    x /= GRIDX;
	    x *= GRIDX;

	    y /= GRIDY;
	    y *= GRIDY;
	    
//	    if(x<0)x=0;
//	    if(x+draggedCard.getWidth()>mainPanel.getWidth())
//	    if(y<mainPanel.getLocationOnScreen().getY()) y = mainPanel.getY();
//	    if(y+draggedCard.getHeight()>=mainPanel.getHeight()+mainPanel.getY()) y = mainPanel.getHeight()+mainPanel.getY();

	    // redraw the card at its new location
	    draggedCard.setLocation(x, y);
	}
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }

    void disposeBackgroundFrame(BackgroundFrame frame) {
	// do in separate thread? Nahh
	backgroundPanel.setBackgroundImage(ImageLoader.createImageIconAtHomeLocation(userData.getUserBackground()));
	frame.dispose();
    }

    public void startSession(ConnectionProxy conn) {
	// have connection
	this.connection = conn;

	// put hero card into play
	spawnCard(deck.getHero());
	
	startGame(ONLINE);
    }

    public void terminateSession() {
	this.stopGame();
    }

    private void startGame(int state) {
	this.state = state;

	if (state == ONLINE) {
	    this.stopSessionItem.setEnabled(true);
	    this.showHandItem.setEnabled(true);
	    this.showDeckItem.setEnabled(true);
	    this.showGraveyardItem.setEnabled(true);
	}

	// enable buttons
	this.deckButton.setEnabled(true);
	this.graveyardButton.setEnabled(true);
	this.removedButton.setEnabled(true);

	resetLayout();
    }

    private void stopGame() {
	this.state = NOTHING;

	this.stopSessionItem.setEnabled(false);
	this.showHandItem.setEnabled(false);
	this.showDeckItem.setEnabled(false);
	this.showGraveyardItem.setEnabled(false);

	// disable buttons
	this.deckButton.setEnabled(false);
	this.graveyardButton.setEnabled(false);
	this.removedButton.setEnabled(false);

	resetLayout();
    }

    private void resetLayout() {
	// empty hand
	this.leftList.setListData(new Object[0]);

	// clear everything on the table
	mainPanel.removeAll();

	// add background again
	mainPanel.add(backgroundPanel, JLayeredPane.DEFAULT_LAYER);
    }

    private void redrawAllCards() {
	mainPanel.removeAll();
	mainPanel.add(backgroundPanel, JLayeredPane.DEFAULT_LAYER);

//	for (CardPanel cardPanel : myCards) {
//	    mainPanel.add(cardPanel, new Integer(JLayeredPane.PALETTE_LAYER+myCards.indexOf(cardPanel)));
//	}
	for (int i = 0; i < cards.size(); i++) {
	    mainPanel.add(cards.get(i), new Integer(JLayeredPane.PALETTE_LAYER + i));
	}

	mainPanel.validate();
    }

    private void drawCard(int amount) {
	for (int i = 0; i < amount; i++) {
	    Card drawn = deck.drawCard();
	    if (drawn != null) {
		hand.add(drawn.getName());
	    } else {
		// DECK IS EMPTY
		JOptionPane.showMessageDialog(new JFrame(), "Your deck is empty!", "Can't draw card", JOptionPane.ERROR_MESSAGE);
		break;
	    }
	    sendMessage("drawing a card");
	}

	leftList.setListData(hand.toArray(new String[0]));
    }

    private void playCardFromHand(String cardName) {
	Card card = model.generateCardByName(model.getCardByName(cardName).getType(), cardName);

	if (card != null) {
//	    CardPanel cardPanel = new CardPanel(card, myCards.size(), myCards.size());
	    CardPanel cardPanel = new CardPanel(card, cards.size());
	    cardPanel.setBounds(40, 40, 60, 60);

	    addToPlay(cardPanel);

	    if (state == ONLINE) {
		//send gui update
		connection.sendGUIMessage(cardPanel);
	    }
	    sendMessage("playing " + card.getName().toUpperCase() + " from HAND");

	    // remove card from hand
	    hand.remove(cardName);
	}

	leftList.setListData(hand.toArray(new String[0]));
	leftList.clearSelection();
	leftList.validate();
    }

    private void spawnCard(String cardName) {
	Card card = model.generateCardByName(model.getCardByName(cardName).getType(), cardName);

	if (card != null) {
//	    CardPanel cardPanel = new CardPanel(card, myCards.size(), myCards.size());
	    CardPanel cardPanel = new CardPanel(card, cards.size());
	    cardPanel.setBounds(40, 40, 60, 60);

	    addToPlay(cardPanel);

	    if (state == ONLINE) {
		//send gui update
		connection.sendGUIMessage(cardPanel);
	    }
	}
    }

    /**
     * Supposed to be called by receiveForeignCard
     * 
     * @param cardName
     * @param GUID 
     */
    private void spawnCardWithGUID(String cardName, String GUID) {
	Card card = model.generateCardByName(model.getCardByName(cardName).getType(), cardName);

	if (card != null) {
	    CardPanel cardPanel = new CardPanel(card, cards.size(), GUID);
	    cardPanel.setBounds(40, 40, 60, 60);

	    addToPlay(cardPanel);

	    if (state == ONLINE) {
		connection.sendGUIMessage(cardPanel);
	    }
	}
    }

    private void addToPlay(CardPanel cardPanel) {
	System.out.println("Adding a card to play (" + cardPanel.getCardName() + ")!");

	cards.add(cardPanel);

//	int layer = new Integer(JLayeredPane.PALETTE_LAYER + cards.indexOf(cardPanel));

	mainPanel.add(cardPanel, new Integer(JLayeredPane.PALETTE_LAYER + cards.indexOf(cardPanel)));
	mainPanel.validate();
	mainPanel.repaint();
    }

    private void addToPlay(CardPanel cardPanel, Point loc) {
	cardPanel.setLocation(loc);
	addToPlay(cardPanel);
    }

    private void moveCardToHandFromPlay(CardPanel cardPanel) {
	mainPanel.remove(cardPanel);

	cardPanel.setVisible(false);
	hand.add(cardPanel.getCard().getName());
	leftList.setListData(hand.toArray(new String[0]));

	mainPanel.validate();
	mainPanel.repaint();
    }

    private void moveCardToGraveyardFromPlay(CardPanel cardPanel) {
	cardPanel.setVisible(false);
	
	cards.remove(cardPanel);
	mainPanel.remove(cardPanel);

	
	// add to top
	graveyard.add(0, cardPanel.getCard().getName());

	mainPanel.validate();
	mainPanel.repaint();
    }

    private void sendMessage(String msg) {
	addToChat("Me: " + msg);

	if (state == ONLINE) {
	    // send
	    connection.sendTextMessage(msg);
	}
    }

    // Message Handler protocol
    @Override
    public void receiveTextMessage(String msg) {
	addToChat("Stranger: " + msg);
    }

    @Override
    public void receiveForeignCard(CardPanel cardPanel) {
	addToPlay(cardPanel);
    }

    @Override
    public void moveCardWithGUIDToLocation(String GUID, Point location) {
	CardPanel moveMe = findCardPanelForGUID(GUID);
	if (moveMe != null) {
	    moveMe.setLocation(location);
	}
	mainPanel.validate();
    }

    @Override
    public void applySnapshotToCardWithGUID(String GUID, CardSnapshot snapshot) {
	CardPanel changeMe = findCardPanelForGUID(GUID);
	if (changeMe != null) {
	    changeMe.applySnapshot(snapshot);
	}
	mainPanel.validate();
    }
}