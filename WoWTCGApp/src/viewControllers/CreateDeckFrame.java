/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CreateDeckFrame.java
 *
 * Created on Dec 14, 2011, 12:58:47 AM
 */
package viewControllers;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Map.Entry;
import java.util.TreeMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.SwingUtilities;
import model.DeckBuilder;
import model.Model;
import model.UserData;

/**
 * Add extra filters?
 * - race
 * - class
 * - ?
 * 
 * 
 * KNOWN ISSUE: right click shows selected card but doesn't shift selection
 *
 * @author Warkst
 */
public class CreateDeckFrame extends javax.swing.JFrame implements DeckBuilder {

    private MainFrame delegate;
    private Model model;
    private UserData userData;
    // deck builder
    private String hero;
    private TreeMap<String, Integer> deck = new TreeMap<String, Integer>();

    /** Creates new form CreateDeckFrame */
    public CreateDeckFrame(MainFrame delegate, Model model, UserData userData) {
	this.delegate = delegate;
	this.model = model;
	this.userData = userData;

	this.setLocationRelativeTo(delegate);
	this.setLocation(delegate.getX()+300, delegate.getY()+100);

	initComponents();
	
	this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
	this.addWindowListener(new WindowAdapter() {

	    @Override
	    public void windowClosing(WindowEvent e) {
		close();
	    }
	});

	// disable this until a hero is set
	this.saveButton.setEnabled(false);


	this.cardsList.setListData(model.allCards());
	this.heroesList.setListData(model.allHeroes());
	this.deckList.setListData(deck.keySet().toArray(new String[0]));

	this.deckList.setCellRenderer(new DeckListCellRenderer());
	
	// set filter box to card types, starting with "All"
	this.filterComboBox.setModel(new DefaultComboBoxModel(model.allTypes()));
	this.filterComboBox.setSelectedIndex(0);
	
	this.classComboBox.setModel(new DefaultComboBoxModel(model.getClasses()));
	this.classComboBox.setSelectedIndex(0);
    }

    private void close() {
//	System.out.println("STUB:: closed/cancelled the create deck frame");
	this.dispose();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cardsList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        filterComboBox = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        heroesList = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        classComboBox = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        deckList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        heroLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        totalCardsLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        validateButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerLocation(350);
        jSplitPane1.setDividerSize(3);
        jSplitPane1.setEnabled(false);

        cardsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        cardsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        cardsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cardsListMouseClicked(evt);
            }
        });
        cardsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cardsListKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(cardsList);

        jLabel2.setText("Filter:");

        filterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        filterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterComboBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(27, 27, 27)
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(filterComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(filterComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 524, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cards", jPanel3);

        heroesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        heroesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        heroesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                heroesListMouseClicked(evt);
            }
        });
        heroesList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                heroesListKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(heroesList);

        jLabel3.setText("Class:");

        classComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        classComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classComboBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(26, 26, 26)
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(classComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(classComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 525, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Heroes", jPanel4);

        jSplitPane1.setLeftComponent(jTabbedPane1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Deck"));

        deckList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        deckList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        deckList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deckListMouseClicked(evt);
            }
        });
        deckList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                deckListKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(deckList);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Hero"));

        heroLabel.setText("<no hero!>");
        heroLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                heroLabelMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(heroLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(heroLabel)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jLabel1.setText("Total cards:");

        totalCardsLabel.setText("0");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(totalCardsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(totalCardsLabel)))
        );

        jSplitPane1.setRightComponent(jPanel1);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        validateButton.setText("Validate");
        validateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(405, 405, 405)
                .add(validateButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(cancelButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(saveButton))
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(saveButton)
                    .add(cancelButton)
                    .add(validateButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
	JFileChooser c = userData.getFileChooser();
	int rVal = c.showSaveDialog(this);
	if (rVal == JFileChooser.APPROVE_OPTION) {
	    File f = c.getSelectedFile();
	    String filePath = f.getPath();
	    if (!filePath.toLowerCase().endsWith(".wtd")) {
		f = new File(filePath + ".wtd");
	    }
	    saveDeck(f);
	}
	if (rVal == JFileChooser.CANCEL_OPTION) {
	    // do nothing
	}
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
	close();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void deckListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deckListMouseClicked
	// clear cardsList selection
	cardsList.clearSelection();
	heroesList.clearSelection();

	// select a card in the deck
	if (evt.getButton() == MouseEvent.BUTTON1) {
	    if (evt.getClickCount() % 2 == 0) {
		System.out.println("Double clicked on card: " + deckList.getSelectedValue());

		removeFromDeck((String) deckList.getSelectedValue());
	    }
	} else if (evt.getButton() == MouseEvent.BUTTON3) {
	    deckList.setSelectedIndex(deckList.locationToIndex(evt.getPoint()));
	    SwingUtilities.invokeLater(new Runnable() {
		@Override
		public void run() {
		    model.getCardByName((String) deckList.getSelectedValue()).showCard();
		}
	    });
	}
    }//GEN-LAST:event_deckListMouseClicked

    private void cardsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cardsListMouseClicked
	// clear deckList selection
	deckList.clearSelection();

	// select a card in the total database
	if (evt.getButton() == MouseEvent.BUTTON1) {
	    if (evt.getClickCount() % 2 == 0) {
		System.out.println("Double clicked on card: " + cardsList.getSelectedValue());

		addToDeck((String) cardsList.getSelectedValue());
	    }
	} else if (evt.getButton() == MouseEvent.BUTTON3) {
	    cardsList.setSelectedIndex(cardsList.locationToIndex(evt.getPoint()));
	    SwingUtilities.invokeLater(new Runnable() {

		@Override
		public void run() {
//		    System.out.println("STUB:: show card!! " + cardsList.getSelectedValue());
		    model.getCardByName((String) cardsList.getSelectedValue()).showCard();
		}
	    });
	}
    }//GEN-LAST:event_cardsListMouseClicked

    private void heroesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_heroesListMouseClicked
	// clear deckList selection
	deckList.clearSelection();

	// select a card in the total database
	if (evt.getButton() == MouseEvent.BUTTON1) {
	    if (evt.getClickCount() % 2 == 0) {
		System.out.println("Double clicked on card: " + heroesList.getSelectedValue());

		setHero((String) heroesList.getSelectedValue());
	    }
	} else if (evt.getButton() == MouseEvent.BUTTON3) {
	    heroesList.setSelectedIndex(heroesList.locationToIndex(evt.getPoint()));
//	    try {
//		Robot robot = new java.awt.Robot();
//		robot.mousePress(InputEvent.BUTTON1_MASK);
//		robot.mouseRelease(InputEvent.BUTTON1_MASK);
//	    } catch (AWTException ae) {
//		System.out.println(ae);
//	    }
	    SwingUtilities.invokeLater(new Runnable() {

		@Override
		public void run() {
//		    System.out.println("STUB:: show card!! " + heroesList.getSelectedValue());
		    model.getCardByName((String) heroesList.getSelectedValue()).showCard();
		}
	    });
	}
    }//GEN-LAST:event_heroesListMouseClicked

    private void filterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterComboBoxActionPerformed
	cardsList.setListData(model.allCardsForTypeIndex(filterComboBox.getSelectedIndex()));
	cardsList.validate();
	cardsList.repaint();
    }//GEN-LAST:event_filterComboBoxActionPerformed

    private void heroLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_heroLabelMouseClicked
	if (evt.getButton() == MouseEvent.BUTTON3) {
	    if (hasHero()) {
		model.getCardByName(hero).showCard();
	    }
	}
    }//GEN-LAST:event_heroLabelMouseClicked

    private void validateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateButtonActionPerformed
	System.out.println("STUB:: validate clicked. NOT YET SUPPORTED");
    }//GEN-LAST:event_validateButtonActionPerformed

    private void cardsListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cardsListKeyReleased
	if(evt.getKeyCode() == KeyEvent.VK_ENTER || evt.getKeyCode() == KeyEvent.VK_RIGHT){
	    //add to deck
	    addToDeck((String) cardsList.getSelectedValue());
	}
    }//GEN-LAST:event_cardsListKeyReleased

    private void deckListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deckListKeyReleased
	if(evt.getKeyCode() == KeyEvent.VK_ENTER || 
		evt.getKeyCode() == KeyEvent.VK_LEFT ||
		evt.getKeyCode() == KeyEvent.VK_DELETE ||
		evt.getKeyCode() == KeyEvent.VK_BACK_SPACE){
	    //add to deck
	    removeFromDeck((String) deckList.getSelectedValue());
	}
    }//GEN-LAST:event_deckListKeyReleased

    private void heroesListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_heroesListKeyReleased
	if(evt.getKeyCode() == KeyEvent.VK_ENTER || evt.getKeyCode() == KeyEvent.VK_RIGHT){
	    //add to deck
	    setHero((String) heroesList.getSelectedValue());
	}
    }//GEN-LAST:event_heroesListKeyReleased

    private void classComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classComboBoxActionPerformed
	if(((String)classComboBox.getSelectedItem()).compareToIgnoreCase("all")==0){
	    heroesList.setListData(model.allHeroes());
	} else {
	    heroesList.setListData(model.getHeroesByClass((String)classComboBox.getSelectedItem()));
	}
	heroesList.validate();
	heroesList.repaint();
    }//GEN-LAST:event_classComboBoxActionPerformed

    private void updateSaveButton() {
	if (hasHero() && getDeckSize() > 0) {
	    this.saveButton.setEnabled(true);
	} else {
	    this.saveButton.setEnabled(false);
	}
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JList cardsList;
    private javax.swing.JComboBox classComboBox;
    private javax.swing.JList deckList;
    private javax.swing.JComboBox filterComboBox;
    private javax.swing.JLabel heroLabel;
    private javax.swing.JList heroesList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel totalCardsLabel;
    private javax.swing.JButton validateButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addToDeck(String card) {
	if (deck.containsKey(card)) {
	    deck.put(card, deck.get(card) + 1);
	} else {
	    deck.put(card, new Integer(1));
	}

	this.deckList.setListData(deck.keySet().toArray(new String[0]));
	this.deckList.validate();
	this.deckList.repaint();

	this.totalCardsLabel.setText("" + getDeckSize());
	this.totalCardsLabel.validate();
	this.totalCardsLabel.repaint();

	updateSaveButton();
    }

    @Override
    public void removeFromDeck(String card) {
	if (deck.containsKey(card)) {
	    if (deck.get(card) > 1) {
		deck.put(card, deck.get(card) - 1);
	    } else if (deck.get(card) == 1) {
		deck.remove(card);
	    }
	}

	this.deckList.setListData(deck.keySet().toArray(new String[0]));
	this.deckList.validate();
	this.deckList.repaint();

	this.totalCardsLabel.setText("" + getDeckSize());
	this.totalCardsLabel.validate();
	this.totalCardsLabel.repaint();

	updateSaveButton();
    }

    @Override
    public int getDeckSize() {
	int sum = 0;
	for (String card : deck.keySet()) {
	    sum += deck.get(card); // count all values
	}
	return sum;
    }

    @Override
    public boolean validateDeck() {
	// add possible validation
	return true;
    }

    @Override
    public void setHero(String hero) {
	this.hero = hero;

	String clazz = model.getCardByName(hero).getClazz();

	this.heroLabel.setText(hero + " (" + clazz + ")");
	this.heroLabel.validate();
	this.heroLabel.repaint();

	updateSaveButton();
    }

    @Override
    public boolean hasHero() {
	return this.hero != null;
    }

    @Override
    public void saveDeck(File file) {
	try {
	    PrintWriter out = new PrintWriter(file);

	    out.println(hero);
	    out.println(model.getCardByName(hero).getClazz());

	    for (Entry<String, Integer> card : deck.entrySet()) {
		out.print(card.getValue());
		out.print(";;"); // delimiter between quantity and type
		out.print(model.getCardByName(card.getKey()).getType());
		out.print(";;"); // delimiter between type and name
		out.println(card.getKey());
	    }

	    out.flush();
	    out.close();

	    System.out.println("File was saved!");

	    this.dispose();

	} catch (FileNotFoundException ex) {
	    //Logger.getLogger(CreateDeckFrame.class.getName()).log(Level.SEVERE, null, ex);
	    System.err.println("Problem saving deck! " + ex);
	    JOptionPane.showMessageDialog(new JFrame(), "An error occured trying to save your deck! The deck was not saved.", "Error", JOptionPane.ERROR_MESSAGE);
	}
    }

    private class DeckListCellRenderer implements ListCellRenderer {

	@Override
	public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
	    
	    JPanel p = new JPanel();
	    p.setBackground(Color.WHITE);

	    p.setLayout(new BorderLayout());

	    JLabel l = new JLabel(value.toString());
	    p.add(l, BorderLayout.WEST);

	    JLabel q = new JLabel("(" + deck.get(value.toString()) + ")");
	    p.add(q, BorderLayout.EAST);

	    if (isSelected) {
		l.setForeground(Color.WHITE);
		q.setForeground(Color.WHITE);
		p.setBackground(new Color(45, 84, 122));
	    }

	    p.addMouseListener(new MouseAdapter() {

		@Override
		public void mouseClicked(MouseEvent e) {
		    System.out.println("Mouse clickueru");
		}
	    });

	    return p;
	}
    }
}