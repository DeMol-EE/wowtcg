/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Session.java
 *
 * Created on 20-aug-2012, 19:30:32
 */
package viewControllers.session;

import images.ImageLoader;
import java.awt.BorderLayout;
import javax.swing.JLabel;
import model.Table;

/**
 *
 * @author Robin jr
 */
public class TableController extends javax.swing.JPanel {
    private final SessionController controller;
    private final Table table;
    
    private CardController resolvedCard;
    
    /** Creates new form Session */
    public TableController(SessionController controller) {
	initComponents();
	
	this.controller = controller;
	
	this.resolvedOutlet.add(new JLabel(ImageLoader.scaleImage(ImageLoader.createImageIconAtHomeLocation("template.png"), this.resolvedOutlet.getPreferredSize())));
	
	this.table = new Table(this);
    }
    
    
    /************************
     * Model callbacks
     ************************/
    
    public void updateMyHero(){
	System.out.println("Update my hero called");
	
	
	myHeroOutlet.removeAll();
	myHeroOutlet.add(table.getMyHero().scale(myHeroOutlet.getPreferredSize()), BorderLayout.CENTER);
	myHeroOutlet.repaint();
	myHeroOutlet.validate();
    }
    
    public void updateEnemyHero(){
	System.out.println("Update enemy hero called");
	
	enemyHeroOutlet.removeAll();
	enemyHeroOutlet.add(table.getEnemyHero().scaleIcon(enemyHeroOutlet.getPreferredSize()), BorderLayout.CENTER);
	enemyHeroOutlet.repaint();
	enemyHeroOutlet.validate();
    }
    
    public void updateMyCards(){
	System.out.println("Update my cards called");
	
	myCards.removeAll();
	for (CardController cardController : table.getMyCards()) {
	    myCards.add(cardController);
	}
	myCards.repaint();
	myCards.validate();
    }
    
    public void updateEnemyCards(){
	System.out.println("Update enemy cards called");
    }
    
    public void updateMyResources(){
	System.out.println("Update my resources called");
	
	myResources.removeAll();
	for (CardController cardController : table.getMyResources()) {
	    myResources.add(cardController);
	}
	myResources.repaint();
	myResources.validate();
    }
    
    public void updateEnemyResources(){
	System.out.println("Update enemy resources called");
    }

    /************************
     * Interaction with model
     ************************/
    
    public void setMyHero(CardController hero){
	hero.setCardAnchor(CardController.CARD_ANCHOR_BOTTOM);
	table.setMyHero(hero);
    }
    
    public void addMyCard(CardController toAdd){
	table.addMyCard(toAdd.addTableMoudeListener(this));
    }
    
    public void addMyResource(CardController toAdd){
	table.addMyResource(toAdd.addResourceMouseListener(this));
    }
    
    public void removeMyCardFromPlay(CardController toRemove){
	table.removeMyCard(toRemove);
	toRemove.removeTableMouseListener();
	
	controller.addCardToGraveyard(toRemove);
    }
    
    public void removeMyResourceFromPlay(CardController toRemove){
	table.removeMyResource(toRemove);
	toRemove.removeResourceMouseListener();
	
	controller.addCardToGraveyard(toRemove);
    }
    
    public void resolve(CardController card){
	resolvedOutlet.removeAll();
	resolvedOutlet.add(card.scale(resolvedOutlet.getPreferredSize(), 0.98f));
	resolvedOutlet.repaint();
	resolvedOutlet.validate();
//	table.setResolved(card);
    }
    
    public void prepareAttachingOfCard(CardController toAttach){
	// add listener to all cards
	table.addAttachListeners(toAttach);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sidebarContainer = new javax.swing.JPanel();
        enemyHeroOutlet = new javax.swing.JPanel();
        enemyInfoPanel = new javax.swing.JPanel();
        resolvedOutlet = new javax.swing.JPanel();
        myInfoPanel = new javax.swing.JPanel();
        myHeroOutlet = new javax.swing.JPanel();
        tableContainer = new javax.swing.JPanel();
        enemyTableOutlet = new javax.swing.JPanel();
        enemyResources = new javax.swing.JPanel();
        enemyCards = new javax.swing.JPanel();
        myTableOutlet = new javax.swing.JPanel();
        myCards = new javax.swing.JPanel();
        myResources = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        sidebarContainer.setLayout(new java.awt.GridBagLayout());

        enemyHeroOutlet.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        enemyHeroOutlet.setMaximumSize(new java.awt.Dimension(140, 200));
        enemyHeroOutlet.setMinimumSize(new java.awt.Dimension(140, 200));
        enemyHeroOutlet.setPreferredSize(new java.awt.Dimension(140, 200));
        enemyHeroOutlet.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        sidebarContainer.add(enemyHeroOutlet, gridBagConstraints);

        enemyInfoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        sidebarContainer.add(enemyInfoPanel, gridBagConstraints);

        resolvedOutlet.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        resolvedOutlet.setMinimumSize(new java.awt.Dimension(10, 200));
        resolvedOutlet.setPreferredSize(new java.awt.Dimension(140, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        sidebarContainer.add(resolvedOutlet, gridBagConstraints);

        myInfoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        sidebarContainer.add(myInfoPanel, gridBagConstraints);

        myHeroOutlet.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        myHeroOutlet.setMaximumSize(new java.awt.Dimension(140, 200));
        myHeroOutlet.setMinimumSize(new java.awt.Dimension(140, 200));
        myHeroOutlet.setPreferredSize(new java.awt.Dimension(140, 200));
        myHeroOutlet.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        sidebarContainer.add(myHeroOutlet, gridBagConstraints);

        add(sidebarContainer, java.awt.BorderLayout.WEST);

        tableContainer.setLayout(new java.awt.GridLayout(2, 1));

        enemyTableOutlet.setMinimumSize(new java.awt.Dimension(0, 0));
        enemyTableOutlet.setPreferredSize(new java.awt.Dimension(1034, 300));
        enemyTableOutlet.setLayout(new java.awt.GridLayout(2, 0));

        enemyResources.setBackground(new java.awt.Color(0, 0, 255));
        enemyTableOutlet.add(enemyResources);

        enemyCards.setBackground(new java.awt.Color(102, 102, 255));
        enemyTableOutlet.add(enemyCards);

        tableContainer.add(enemyTableOutlet);

        myTableOutlet.setMinimumSize(new java.awt.Dimension(0, 0));
        myTableOutlet.setPreferredSize(new java.awt.Dimension(1034, 300));
        myTableOutlet.setLayout(new java.awt.GridLayout(2, 0));

        myCards.setBackground(new java.awt.Color(102, 255, 102));
        myCards.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        myTableOutlet.add(myCards);

        myResources.setBackground(new java.awt.Color(51, 204, 0));
        myTableOutlet.add(myResources);

        tableContainer.add(myTableOutlet);

        add(tableContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel enemyCards;
    private javax.swing.JPanel enemyHeroOutlet;
    private javax.swing.JPanel enemyInfoPanel;
    private javax.swing.JPanel enemyResources;
    private javax.swing.JPanel enemyTableOutlet;
    private javax.swing.JPanel myCards;
    private javax.swing.JPanel myHeroOutlet;
    private javax.swing.JPanel myInfoPanel;
    private javax.swing.JPanel myResources;
    private javax.swing.JPanel myTableOutlet;
    private javax.swing.JPanel resolvedOutlet;
    private javax.swing.JPanel sidebarContainer;
    private javax.swing.JPanel tableContainer;
    // End of variables declaration//GEN-END:variables
}
