/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConnectingFrame.java
 *
 * Created on Dec 13, 2011, 12:58:46 PM
 */
package viewControllers;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import network.Connection;
import network.ConnectionProxy;

/**
 *
 * @author Warkst
 */
public class ConnectingFrame extends javax.swing.JFrame {

    MainFrame delegate;
    int port = 9856; // dat port
    String hostIP;
    NetworkListener listener;
    NetworkConnector connector;
    ConnectionFrame parent;
    
    /** Creates new form ConnectingFrame */
    public ConnectingFrame(MainFrame del, ConnectionFrame parent, String hostIP) {
	this.delegate = del;
	this.parent = parent;
	this.hostIP = hostIP;
	
	initComponents();
	
	this.setLocationRelativeTo(null);
	
	initNetworkAsClient();
    }
    
    public ConnectingFrame(MainFrame del, ConnectionFrame parent) {
	this.delegate = del;
	this.parent = parent;
	
	initComponents();
	
	this.setLocationRelativeTo(null);
	
	initNetworkAsHost();
    }
    
    private void initNetworkAsClient(){
	connector = new NetworkConnector();
	connector.start();
    }
    
    private void initNetworkAsHost(){
	listener = new NetworkListener();
	listener.start();
    }
    
    private void updateStatus(final String status){
	new Thread(new Runnable() {
	    @Override
	    public void run() {
		statusLabel.setText(status);
	    }
	}).start();
    }
    
    private void disposeAndStart(Socket client, boolean host){
//	new ChatFrame(delegate, client, host).setVisible(true);
	Connection conn = new Connection(delegate, client, host);
	conn.start();
	ConnectionProxy prox = new ConnectionProxy(conn);
		
	parent.dispose();
	this.dispose();
    }
    
    private void disposeAndBackToStart(){
	parent.setVisible(true);
	this.dispose();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusLabel.setText("status");

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(statusLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 355, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(152, 152, 152)
                .add(jButton1)
                .addContainerGap(157, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(statusLabel)
                .add(18, 18, 18)
                .add(jButton1)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
	if(listener!=null)listener.terminate();
	if(connector!=null)connector.terminate();
	disposeAndBackToStart();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    private class NetworkListener extends Thread{

	ServerSocket socket;
	Socket client;
	
	@Override
	public void run() {
	    try {
		updateStatus("Setting up socket...");
		socket = new ServerSocket(port);

		// wait for connections
		updateStatus("Port ready, waiting for incoming connections...");
		client = socket.accept();
		
		// on success:
		disposeAndStart(client, true);		
	    } catch (Exception ex) {
		
		// close socket??
		
		JOptionPane.showMessageDialog(new JFrame(), "The operation was terminated.", "Connection aborted", JOptionPane.ERROR_MESSAGE);
		disposeAndBackToStart();
		return;
	    }
	}
	
	public void terminate(){
	    try {
		socket.close();
	    } catch (IOException ex) {
		return;
	    }
	}
    }
    
    private class NetworkConnector extends Thread{

	private Socket client;
	private Timer timer;
	private boolean showMessage;

	public NetworkConnector() {
	    this.showMessage = true;
	    this.timer = new Timer(30000, new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
		    timeOut();
		}
	    });
	}
	
	
	
	@Override
	public void run() {
	    // start timeout timer
	    timer.start();
	    try {
		updateStatus("Connecting to server...");
		client = new Socket(hostIP, port);

		// connection is made, stop the timeout timer
		timer.stop();
		
		// on success:
		disposeAndStart(client, false);
	    } catch (Exception ex) {
		if(this.showMessage) JOptionPane.showMessageDialog(new JFrame(), "The operation was terminated.", "Connection aborted", JOptionPane.ERROR_MESSAGE);
		disposeAndBackToStart();
		return;
	    }
	}
	
	public void terminate(){
	    try {
		client.close();
	    } catch (IOException ex) {
		return;
	    }
	}
	
	private void timeOut(){
	    if(this.showMessage) JOptionPane.showMessageDialog(new JFrame(), "The operation has timed out. Make sure the host can be reached on port 9856!", "Connection aborted", JOptionPane.ERROR_MESSAGE);
	    this.showMessage = false;
	    try {
		client.close();
	    } catch (IOException ex) {
		return;
	    }
	}
    }
}
